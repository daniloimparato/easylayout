---
title: "interações STRING/STITCH"
knit: (function(inputFile, encoding) {
  rmarkdown::render(inputFile, encoding = encoding, output_dir = "notebooks") })
output:
  html_document:
    df_print: paged
    theme: default
    highlight: espresso
    toc: true
    toc_depth: 2
    toc_float: true
    number_sections: true
---
# Objetivo
Coletar e filtrar as interações PPI dos genes obtidos via STRING/STITCH.
```{r}
#carregando pacotes necessarios
library(RCurl)

#funcao combinescores
#nscore,fscore,pscore,ascore,escore,dscore,tscore
combinescores <- function(string_interactions, sources){
  cs <- 1-string_interactions[,sources, drop=F]
  cs <- apply(X = cs, MARGIN = 1, FUN = function(x) 1-prod(x))
  return(cs)
}
```


# Dados
Carregamos a `tabela_final` construída no notebook anterior.
```{r rows.print=5}
genes <- read.table(
  "data/genes.tsv"
  ,header=T
  ,sep="\t"
  ,stringsAsFactors=F
)

#removendo duplicados
genes <- unique(genes[,c("protein_id","gene_name")])
genes <- aggregate(gene_name ~ protein_id, genes, paste, collapse = ",")
```

# STRING
## API
### RESOLVENDO IDS
#### STRING
Baixamos a tabela de interações pela API do string
```{r rows.print=5}
string_resolve <- read.table(
  text = postForm("http://string-db.org/api/tsv/get_string_ids"
                  ,identifiers = paste(genes[,"protein_id"],collapse="%0d",sep="")
                  ,echo_query = "1"
                  ,species = "3702"
                  ,style = "post"
  )
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
  ,comment.char = ""
  ,quote = ""
)

#checking
#genes$protein_id[!genes$protein_id %in% string_resolve$queryItem]

#flagging duplicates
string_resolve[,"duplicated"] <- duplicated(string_resolve$queryItem) + duplicated(string_resolve$queryItem, fromLast = T)

#cleaning
cols <- c("queryItem","stringId","preferredName","duplicated","annotation")
string_resolve <- string_resolve[order(string_resolve[,"duplicated"],decreasing=T),cols]

string_resolve
```
#### STITCH
```{r rows.print=5}
stitch_resolve <- read.table(
  text = postForm("http://stitch.embl.de/api/tsv/resolveList"
                  ,identifiers = paste(genes[,"protein_id"],collapse="%0d",sep="")
                  ,echo_query = "1"
                  ,species = "3702"
                  ,style = "post"
  )
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
  ,comment.char = ""
  ,quote = ""
)

stitch_resolve[,"queryItem"] <- sapply(strsplit(stitch_resolve[,"stringId"],"\\."),"[",2)

#checking
#genes$protein_id[!genes$protein_id %in% stitch_resolve$queryItem]

#flagging duplicates
stitch_resolve[,"duplicated"] <- duplicated(stitch_resolve$queryItem) + duplicated(stitch_resolve$queryItem,fromLast = T)

#cleaning
cols <- c("queryItem","stringId","preferredName","duplicated","annotation")
stitch_resolve <- stitch_resolve[order(stitch_resolve[,"duplicated"],decreasing=T),cols]

stitch_resolve
```
#### DEDUPING
```{r rows.print=5}
write.table(string_resolve,"data/dedupe_string.tsv",row.names = F,col.names = T,sep="\t", quote = F)
write.table(stitch_resolve,"data/dedupe_stitch.tsv",row.names = F,col.names = T,sep="\t", quote = F)
```
#### DEDUPED
```{r rows.print=5}
string_resolved <- read.table(
  "data/deduped_string.tsv"
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
  ,comment.char = ""
  ,quote = ""
)

write(string_resolved[,"stringId"],"data/string_proteins.txt")

stitch_resolved <- read.table(
  "data/deduped_stitch.tsv"
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
  ,comment.char = ""
  ,quote = ""
)
```

### REDE
#### STRING
Baixamos a tabela de interações pela API do string
```{r rows.print=5}
string_network <- read.table(
  "data/string_interactions.tsv"
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
)
string_network
```

#### STITCH
Baixamos a tabela de interações pela API do string
```{r rows.print=5}
# stitch_psimi <- read.table(
#   text = postForm("http://stitch.embl.de/api/psi-mi-tab/interactionsList"
#     ,identifiers = paste(stitch_resolved[,"stringId"],collapse="%0d",sep="")
#     ,species = "3702"
#   )
#   ,sep = "\t"
#   ,header = T
#   ,stringsAsFactors = F
# )
# 
# write.table(stitch_psimi,"data/stitch_psimi.tsv",quote = F, row.names = F,col.names = F)

#write(stitch_resolved[,"stringId"],"data/stitch_proteins.txt")
#aqui fiz o grep

stitch_network <- read.table(
  "data/stitch_interactions.tsv"
  ,sep = "\t"
  ,header = T
  ,stringsAsFactors = F
)

stitch_network
```

## Scores
### STRING
Recalculamos o combinedscore apenas com as colunas `escore` (experimental) e `dscore` (database)
```{r rows.print=5}
channels <- c("experimentally_determined_interaction","database_annotated")
string_network[,"cs"] <- combinescores(string_network,channels)
string_network <- string_network[,c("node1_external_id","node2_external_id","cs")]

#subset confidencia >= 0.7
string_network <- string_network[string_network[,"cs"] >= 0.4, c("node1_external_id","node2_external_id")]
string_network
```

### STITCH
Recalculamos o combinedscore apenas com as colunas `escore` (experimental) e `dscore` (database)
```{r rows.print=5}
channels <- c("experimentally_determined_interaction","database_annotated")
stitch_network[,"cs"] <- combinescores(stitch_network,channels)
stitch_network <- stitch_network[,c("node1_external_id","node2_external_id","cs")]

#subset confidencia >= 0.7
stitch_network <- stitch_network[stitch_network[,"cs"] >= 0.4, c("node1_external_id","node2_external_id")]
stitch_network
```

# igraph
Escrevemos a edgelist obtida em `n6_edgelist.tsv`
```{r}
library(igraph)
library(RedeR)

# stm <- as.matrix(stitch_network)
# stm <- stm[!startsWith(stm,"3702")]
# stm <- unique(stm)
# write(stm,"data/chemicals.txt")

vertices <- read.table("data/vertices_info.tsv",header=T,sep="\t",stringsAsFactors = F,comment.char = "", quote="")

edgelist <- rbind(string_network, stitch_network)
edgelist <- unique(edgelist)

g <- graph_from_data_frame(edgelist, directed=F,vertices = vertices)
g <- simplify(g)

#V(g)$name <- V(g)$preferredName

#separando componentes
subgraphs <- decompose.graph(g)
#lcc = largest connected component
lcc <- subgraphs[[which.max(sapply(subgraphs,vcount))]]

rdp <- RedPort()
calld(rdp)

addGraph(rdp, lcc, gcoord=c(40,40), gscale=15, isNest=F, theme='tm1', zoom=25)

#not in lcc
ids_not_in_lcc <- V(g)$id[!V(g)$id %in% V(lcc)$id]
not_in_lcc <- vertices[vertices$stringId %in% ids_not_in_lcc,]
write.table(not_in_lcc,"resultados/not_in_lcc.tsv",sep="\t",col.names = T, row.names = F, quote = F)

ids_in_lcc <- V(g)$id[V(g)$id %in% V(lcc)$id]
in_lcc <- vertices[vertices$stringId %in% ids_in_lcc,]
write.table(in_lcc,"resultados/in_lcc.tsv",sep="\t",col.names = T, row.names = F, quote = F)
```
