,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
print(input)
stopApp(input$mydata)
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
print(input$mydata)
stopApp(input$mydata)
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(input$mydata){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(is.null(input$mydata)){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(!is.null(input$mydata)){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(!is.null(input$mydata)){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
test <- shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(!is.null(input$mydata)){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
test <- shinyApp(ui = htmlTemplate("www/index.html"), server)
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
# Define server logic for random distribution app ----
server <- function(input, output, session) {
# observe({
#   input$mydata
#   color = rgb(runif(1), runif(1), runif(1))
#   session$sendCustomMessage(type = "dataReceivedFromServer", color)
# })
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observe({
if(!is.null(input$mydata)){
stopApp(input$mydata)
}
})
}
a <- htmlTemplate("www/index.html") %>% renderDocument(processDep = createWebDependency)
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
# Create Shiny app ----
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
#shinyApp(ui = fluidPage(tags$script(src = "www/index.js")), server)
# shinyApp(ui = shinyUI(includeScript("www/index.js")), server)
# shinyApp(ui = ui, server)
test
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
server <- function(input, output, session) {
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observeEvent(input$mydata, {
if(!is.null(input$mydata)) stopApp(input$mydata)
})
}
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
server <- function(input, output, session) {
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observeEvent(input$mydata, {
if(!is.null(input$mydata)) stopApp(input$mydata)
})
}
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
server <- function(input, output, session) {
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observeEvent(input$mydata, {
if(!is.null(input$mydata)) stopApp(input$mydata)
})
}
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
server <- function(input, output, session) {
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observeEvent(input$mydata, {
if(!is.null(input$mydata)) stopApp(input$mydata)
})
}
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
test
library(shiny)
library(htmltools)
library(magrittr)
library(igraph)
setwd("C:/R/easylayout/")
edgelist <- read.table(
"../neurotransmission/resultados/n6_edgelist.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
gene_info <- read.table(
"../neurotransmission/resultados/n4_gene_info.tsv"
,header=T
,sep="\t"
,stringsAsFactors=F
)
network <- graph_from_data_frame(edgelist, directed=F, vertices=gene_info)
V(network)$size <- V(network)$system_count * 3
graph_json <- jsonlite::toJSON(list(
nodes = igraph::as_data_frame(network, "vertices")
,links = igraph::as_data_frame(network, "edges")))
server <- function(input, output, session) {
session$sendCustomMessage(type = "dataTransferredFromServer", graph_json)
observeEvent(input$mydata, {
if(!is.null(input$mydata)) stopApp(input$mydata)
})
}
addResourcePath('vivagraph.min.js', 'C:/R/easylayout/www/vivagraph.min.js')
addResourcePath('multiselect.js', 'C:/R/easylayout/www/multiselect.js')
addResourcePath('index.js', 'C:/R/easylayout/www/index.js')
test <- runApp(shinyApp(ui = htmlTemplate("www/index.html"), server))
